#+title: Learn Python

* Basic Concepts and Terminoloy
** Scripts, Modules, Packages, and Libraries
- Script: a Python file that is executable direclty. When run it, it should do something. Scripts often contains code written outside the scope of any classes or functions.

- Module: a Python file that's to be imported into scripts or other modules. It often defines members like classes, functions, and variables intended to besed in other files that import it.

- Package: a collection of related modules that work together to provide certain functionality. These modules are contained within a folder and can be imported just like any other modules. This folder will often contain a special \__init\__.py file that tells python it's a package, potentially containing more modules nested within subdirectories.

- Library: an umbrella term that loosely means "a bundle of code". These can have tens or even hundreds of individual modules that can provide a wide range of functionality. Matplotlib is a plotting library. The Python Standard Library contains hundreds of modules for performing common tasks, like sending emails or reading JSON data. Whatâ€™s special about the Standard Library is that it comes bundled with your installation of Python, so you can use its modules without having to download them from anywhere.

** Virtual Environments
- A isolated container with a Python interpreter, PIP executable, and site-package directory
- Many VE can be activated, which temporarily tricks the shell into thinking that the only Python and PIP executables are the ones that exist in the virtual environment
- Common practice is to use a different VE for each Python project
  - This is especially helpful when two different projects require different versions of the same package. Not even python -m pip can get around this.


** Class
- a blueprint for creating objects (a particular data structure), providing initial values for state (member variables or attributes), and implementations of behavior (member functions or methods)

- How to use it
  1. Define a Class

     #+BEGIN_SRC python :python "python3"
     class MyClass:
         def __init__(self, attribute):
             self.attribute = attribute

         def method(self):
             return "Value: {self.attribute}"
     #+END_SRC

     #+RESULTS:
     : None

  2. *Create an INstance:* You create an instance of the class by calling the class name and passing arguments it expects.
     #+BEGIN_SRC python
     my_instance = MyClass("Hello")
     #+END_SRC






  ,#+BEGIN_SRC R
  print("Hello, world!")
  #+END_SRC
